name: 构建

on: 
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  builder_matrix:
    # 仅在push或pull_request事件包含'进行打包'时执行，workflow_dispatch无条件执行
    if: |
      github.event_name == 'workflow_dispatch' || 
      contains(github.event.head_commit.message, '进行打包') ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '进行打包'))
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            arch: x86
            pack_mode: dir
          - os: windows-2022
            arch: x64
            pack_mode: dir
          - os: windows-2022
            arch: x64
            pack_mode: advanced
          # - os: ubuntu-latest
          #   arch: x64
          #   pack_mode: dir
    runs-on: ${{ matrix.os }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4.2.2
      - name: 安装 Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.os == 'windows-2022' && '3.8.10' || '3.13.1' }}
          architecture: ${{ matrix.arch }}
      - name: 安装 uv
        uses: astral-sh/setup-uv@v4

      - name: 初始化 zip 文件夹
        run: mkdir zip

      - name: 更新 version_info.txt
        if: startsWith(github.ref_name, 'v')
        run: |
          python update_version.py
        env:
          VERSION: ${{ github.ref_name }}

      - name: 安装 Advanced Installer（使用官方 GitHub Action）
        if: ${{ matrix.os == 'windows-2022' && matrix.pack_mode == 'advanced' }}
        uses: caphyon/advinst-github-action@main
        with:
          advinst-version: '22.4'
          advinst-enable-automation: 'true'

      - name: 运行 Windows 构建
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          echo "开始 Windows 构建流程..."
          # 创建虚拟环境
          echo "创建虚拟环境..."
          uv venv
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 激活虚拟环境
          echo "激活虚拟环境..."
          .venv/Scripts/activate
          
          # 安装依赖
          echo "安装项目依赖..."
          uv pip install -r requirements-windows.txt
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 安装 pyinstaller
          echo "安装 PyInstaller..."
          uv pip install pyinstaller
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 清理之前的构建文件
          echo "清理之前的构建文件..."
          Remove-Item -Recurse -Force dist -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force zip_dist -ErrorAction SilentlyContinue
          echo "构建环境准备完成"
          # 根据打包模式选择不同的PyInstaller参数
          if ('${{ matrix.pack_mode }}' -eq 'dir') {
            # 目录模式打包
            echo "开始目录模式打包..."
            pyinstaller main.py `
              -w `
              -D `
              -i ./resources/SecRandom.ico `
              -n SecRandom `
              --add-data ./app/resource:app/resource `
              --add-data LICENSE:. `
              --version-file=version_info.txt `
              --hidden-import=psutil._psutil_windows `
              --hidden-import=pandas._libs.interval `
              --hidden-import=pandas._libs.ops `
              --hidden-import=pandas._libs.tslibs `
              --hidden-import=pandas._libs.lib `
              --hidden-import=pandas._libs.testing `
              --hidden-import=pandas._libs.window `
              --hidden-import=pandas._libs.missing `
              --hidden-import=pandas._libs.hashtable `
              --hidden-import=pandas._libs.skiplist `
              --hidden-import=pandas._libs.hashing `
              --hidden-import=pandas._libs.writers `
              --hidden-import=pandas._libs.json `
              --hidden-import=pandas._libs.parsers `
              --hidden-import=pandas._libs.properties `
              --hidden-import=pandas._libs.reshape `
              --hidden-import=pandas._libs.sparse `
              --hidden-import=pandas._libs.groupby `
              --hidden-import=pandas._libs.join `
              --hidden-import=pandas._libs.reduction `
              --hidden-import=pandas._libs.algos `
              --hidden-import=pandas._libs.ops_dispatch `
              --hidden-import=pandas._libs.arrays `
              --hidden-import=pandas._libs.internals `
              --hidden-import=pandas._libs.tslibs.base `
              --hidden-import=pandas._libs.tslibs.dtypes `
              --hidden-import=pandas._libs.tslibs.conversion `
              --hidden-import=pandas._libs.tslibs.nattype `
              --hidden-import=pandas._libs.tslibs.np_datetime `
              --hidden-import=pandas._libs.tslibs.period `
              --hidden-import=pandas._libs.tslibs.strptime `
              --hidden-import=pandas._libs.tslibs.timestamps `
              --hidden-import=pandas._libs.tslibs.timedeltas `
              --hidden-import=pandas._libs.tslibs.timezones `
              --hidden-import=pandas._libs.tslibs.tzconversion `
              --hidden-import=pandas._libs.tslibs.vectorized `
              --hidden-import=numpy `
              --hidden-import=numpy.core._dtype_ctypes `
              --hidden-import=numpy.core._exceptions `
              --hidden-import=numpy.core._internal `
              --hidden-import=numpy.core._methods `
              --hidden-import=numpy.core._string_helpers `
              --hidden-import=numpy.core._type_aliases `
              --hidden-import=numpy.core._ufunc_config `
              --hidden-import=numpy.linalg `
              --hidden-import=numpy.linalg.linalg `
              --hidden-import=numpy.linalg._umath_linalg `
              --hidden-import=numpy.fft `
              --hidden-import=numpy.fft._pocketfft_internal `
              --hidden-import=numpy.random `
              --hidden-import=numpy.random.bit_generator `
              --hidden-import=numpy.random._common `
              --hidden-import=numpy.random._pickle `
              --hidden-import=numpy.random._mt19937 `
              --hidden-import=numpy.random._philox `
              --hidden-import=numpy.random._pcg64 `
              --hidden-import=numpy.random._sfc64 `
              --hidden-import=numpy.random._generator `
              --hidden-import=numpy.random._bounded_integers `
              --hidden-import=numpy.random.mtrand `
              --hidden-import=numpy.lib `
              --hidden-import=numpy.lib.scimath `
              --hidden-import=numpy.lib.stride_tricks `
              --hidden-import=numpy.core._multiarray_umath `
              --hidden-import=numpy.core._multiarray_tests `
              --hidden-import=numpy.polynomial `
              --hidden-import=numpy.testing `
              --hidden-import=numpy.distutils `
              --hidden-import=numpy.f2py `
              --hidden-import=numpy.ma `
              --hidden-import=numpy.matrixlib `
              --hidden-import=numpy.compat `
              --hidden-import=numpy.ctypeslib `
              --collect-data=pandas `
              --collect-data=numpy `
              --collect-submodules=numpy `
              --collect-submodules=pandas
            if ($LASTEXITCODE -ne 0) { 
              echo "目录模式打包失败"
              exit $LASTEXITCODE 
            }
            echo "目录模式打包完成"
            
            # 记录需要签名的文件路径，稍后在SignPath步骤中统一签名
            echo "记录主可执行文件路径用于后续签名..."
            
            # 搜索可能的可执行文件，处理可能的名称变化
            $exeFiles = Get-ChildItem -Path "dist" -Recurse -Filter "*.exe"
            if ($exeFiles.Count -gt 0) {
              $exePath = $exeFiles[0].FullName
              echo "找到主可执行文件: $exePath"
              echo "主可执行文件路径: $exePath" >> sign_files.txt
              # 记录打包模式信息，用于签名后重新打包
              echo "打包模式: dir" >> sign_files.txt
              echo "sign_files.txt文件已创建，包含主可执行文件路径"
            } else {
              echo "错误: 未找到任何可执行文件"
              # 列出实际目录结构以便调试
              echo "dist目录内容:" 
              Get-ChildItem -Path "dist" -Recurse | ForEach-Object { echo "  $($_.FullName)" }
              # 创建空的sign_files.txt文件，避免后续步骤失败
              echo "创建空的sign_files.txt文件"
              New-Item -Path "sign_files.txt" -ItemType File -Force
            }
              
          } elseif ('${{ matrix.pack_mode }}' -eq 'advanced') {
            # Advanced Installer 模式打包
            echo "开始 Advanced Installer 模式打包..."
            
            # 首先使用 PyInstaller 进行目录模式打包
            echo "使用 PyInstaller 进行目录模式打包..."
            pyinstaller main.py `
              -w `
              -D `
              -i ./resources/SecRandom.ico `
              -n SecRandom `
              --add-data ./app/resource:app/resource `
              --add-data LICENSE:. `
              --version-file=version_info.txt `
              --hidden-import=psutil._psutil_windows `
              --hidden-import=pandas._libs.interval `
              --hidden-import=pandas._libs.ops `
              --hidden-import=pandas._libs.tslibs `
              --hidden-import=pandas._libs.lib `
              --hidden-import=pandas._libs.testing `
              --hidden-import=pandas._libs.window `
              --hidden-import=pandas._libs.missing `
              --hidden-import=pandas._libs.hashtable `
              --hidden-import=pandas._libs.skiplist `
              --hidden-import=pandas._libs.hashing `
              --hidden-import=pandas._libs.writers `
              --hidden-import=pandas._libs.json `
              --hidden-import=pandas._libs.parsers `
              --hidden-import=pandas._libs.properties `
              --hidden-import=pandas._libs.reshape `
              --hidden-import=pandas._libs.sparse `
              --hidden-import=pandas._libs.groupby `
              --hidden-import=pandas._libs.join `
              --hidden-import=pandas._libs.reduction `
              --hidden-import=pandas._libs.algos `
              --hidden-import=pandas._libs.ops_dispatch `
              --hidden-import=pandas._libs.arrays `
              --hidden-import=pandas._libs.internals `
              --hidden-import=pandas._libs.tslibs.base `
              --hidden-import=pandas._libs.tslibs.dtypes `
              --hidden-import=pandas._libs.tslibs.conversion `
              --hidden-import=pandas._libs.tslibs.nattype `
              --hidden-import=pandas._libs.tslibs.np_datetime `
              --hidden-import=pandas._libs.tslibs.period `
              --hidden-import=pandas._libs.tslibs.strptime `
              --hidden-import=pandas._libs.tslibs.timestamps `
              --hidden-import=pandas._libs.tslibs.timedeltas `
              --hidden-import=pandas._libs.tslibs.timezones `
              --hidden-import=pandas._libs.tslibs.tzconversion `
              --hidden-import=pandas._libs.tslibs.vectorized `
              --hidden-import=numpy `
              --hidden-import=numpy.core._dtype_ctypes `
              --hidden-import=numpy.core._exceptions `
              --hidden-import=numpy.core._internal `
              --hidden-import=numpy.core._methods `
              --hidden-import=numpy.core._string_helpers `
              --hidden-import=numpy.core._type_aliases `
              --hidden-import=numpy.core._ufunc_config `
              --hidden-import=numpy.linalg `
              --hidden-import=numpy.linalg.linalg `
              --hidden-import=numpy.linalg._umath_linalg `
              --hidden-import=numpy.fft `
              --hidden-import=numpy.fft._pocketfft_internal `
              --hidden-import=numpy.random `
              --hidden-import=numpy.random.bit_generator `
              --hidden-import=numpy.random._common `
              --hidden-import=numpy.random._pickle `
              --hidden-import=numpy.random._mt19937 `
              --hidden-import=numpy.random._philox `
              --hidden-import=numpy.random._pcg64 `
              --hidden-import=numpy.random._sfc64 `
              --hidden-import=numpy.random._generator `
              --hidden-import=numpy.random._bounded_integers `
              --hidden-import=numpy.random.mtrand `
              --hidden-import=numpy.lib `
              --hidden-import=numpy.lib.scimath `
              --hidden-import=numpy.lib.stride_tricks `
              --hidden-import=numpy.core._multiarray_umath `
              --hidden-import=numpy.core._multiarray_tests `
              --hidden-import=numpy.polynomial `
              --hidden-import=numpy.testing `
              --hidden-import=numpy.distutils `
              --hidden-import=numpy.f2py `
              --hidden-import=numpy.ma `
              --hidden-import=numpy.matrixlib `
              --hidden-import=numpy.compat `
              --hidden-import=numpy.ctypeslib `
              --collect-data=pandas `
              --collect-data=numpy `
              --collect-submodules=numpy `
              --collect-submodules=pandas
            if ($LASTEXITCODE -ne 0) { 
              echo "PyInstaller 打包失败"
              exit $LASTEXITCODE 
            }
            echo "PyInstaller 打包完成"
            
            # 记录需要签名的文件路径，稍后在SignPath步骤中统一签名
            echo "记录主可执行文件路径用于后续签名..."
            
            # 搜索可能的可执行文件，处理可能的名称变化
            $exeFiles = Get-ChildItem -Path "dist" -Recurse -Filter "*.exe"
            if ($exeFiles.Count -gt 0) {
              $exePath = $exeFiles[0].FullName
              echo "找到主可执行文件: $exePath"
              echo "主可执行文件路径: $exePath" >> sign_files.txt
              # 记录打包模式信息，用于签名后重新打包
              echo "打包模式: advanced" >> sign_files.txt
              echo "sign_files.txt文件已创建，包含主可执行文件路径"
            } else {
              echo "错误: 未找到任何可执行文件"
              # 列出实际目录结构以便调试
              echo "dist目录内容:" 
              Get-ChildItem -Path "dist" -Recurse | ForEach-Object { echo "  $($_.FullName)" }
              # 创建空的sign_files.txt文件，避免后续步骤失败
              echo "创建空的sign_files.txt文件"
              New-Item -Path "sign_files.txt" -ItemType File -Force
            }
          }

      - name: 运行 Linux 构建
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "开始 Linux 构建流程..."
          # 安装系统依赖
          echo "安装系统依赖..."
          sudo apt-get update
          sudo apt-get install -y libxcb-cursor0 libxcb-cursor-dev libxkbcommon-x11-0 libxkbcommon-dev
          
          # 创建虚拟环境
          echo "创建虚拟环境..."
          uv venv
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 激活虚拟环境
          echo "激活虚拟环境..."
          source .venv/bin/activate
          
          # 安装依赖
          echo "安装项目依赖..."
          uv pip install -r requirements-linux.txt
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 安装 pyinstaller
          echo "安装 PyInstaller..."
          uv pip install pyinstaller
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 清理之前的构建文件
          echo "清理之前的构建文件..."
          rm -rf dist build zip_dist
          echo "构建环境准备完成"
          
          # 根据打包模式选择不同的PyInstaller参数
          if [ '${{ matrix.pack_mode }}' = 'dir' ]; then
            # 目录模式打包
            echo "开始目录模式打包..."
            pyinstaller main.py \
              -w \
              -D \
              -i ./resources/SecRandom.ico \
              -n SecRandom \
              --add-data ./app/resource:app/resource \
              --add-data LICENSE:. \
              --version-file=version_info.txt \
              --hidden-import=psutil._psutil_linux \
              --hidden-import=pandas._libs.interval \
              --hidden-import=pandas._libs.ops \
              --hidden-import=pandas._libs.tslibs \
              --hidden-import=pandas._libs.lib \
              --hidden-import=pandas._libs.testing \
              --hidden-import=pandas._libs.window \
              --hidden-import=pandas._libs.missing \
              --hidden-import=pandas._libs.hashtable \
              --hidden-import=pandas._libs.skiplist \
              --hidden-import=pandas._libs.hashing \
              --hidden-import=pandas._libs.writers \
              --hidden-import=pandas._libs.json \
              --hidden-import=pandas._libs.parsers \
              --hidden-import=pandas._libs.properties \
              --hidden-import=pandas._libs.reshape \
              --hidden-import=pandas._libs.sparse \
              --hidden-import=pandas._libs.groupby \
              --hidden-import=pandas._libs.join \
              --hidden-import=pandas._libs.reduction \
              --hidden-import=pandas._libs.algos \
              --hidden-import=pandas._libs.ops_dispatch \
              --hidden-import=pandas._libs.arrays \
              --hidden-import=pandas._libs.internals \
              --hidden-import=pandas._libs.tslibs.base \
              --hidden-import=pandas._libs.tslibs.dtypes \
              --hidden-import=pandas._libs.tslibs.conversion \
              --hidden-import=pandas._libs.tslibs.nattype \
              --hidden-import=pandas._libs.tslibs.np_datetime \
              --hidden-import=pandas._libs.tslibs.period \
              --hidden-import=pandas._libs.tslibs.strptime \
              --hidden-import=pandas._libs.tslibs.timestamps \
              --hidden-import=pandas._libs.tslibs.timedeltas \
              --hidden-import=pandas._libs.tslibs.timezones \
              --hidden-import=pandas._libs.tslibs.tzconversion \
              --hidden-import=pandas._libs.tslibs.vectorized \
              --hidden-import=numpy \
              --hidden-import=numpy.core._dtype_ctypes \
              --hidden-import=numpy.core._exceptions \
              --hidden-import=numpy.core._internal \
              --hidden-import=numpy.core._methods \
              --hidden-import=numpy.core._string_helpers \
              --hidden-import=numpy.core._type_aliases \
              --hidden-import=numpy.core._ufunc_config \
              --hidden-import=numpy.linalg \
              --hidden-import=numpy.linalg.linalg \
              --hidden-import=numpy.linalg._umath_linalg \
              --hidden-import=numpy.fft \
              --hidden-import=numpy.fft._pocketfft_internal \
              --hidden-import=numpy.random \
              --hidden-import=numpy.random.bit_generator \
              --hidden-import=numpy.random._common \
              --hidden-import=numpy.random._pickle \
              --hidden-import=numpy.random._mt19937 \
              --hidden-import=numpy.random._philox \
              --hidden-import=numpy.random._pcg64 \
              --hidden-import=numpy.random._sfc64 \
              --hidden-import=numpy.random._generator \
              --hidden-import=numpy.random._bounded_integers \
              --hidden-import=numpy.random.mtrand \
              --hidden-import=numpy.lib \
              --hidden-import=numpy.lib.scimath \
              --hidden-import=numpy.lib.stride_tricks \
              --hidden-import=numpy.core._multiarray_umath \
              --hidden-import=numpy.core._multiarray_tests \
              --hidden-import=numpy.polynomial \
              --hidden-import=numpy.testing \
              --hidden-import=numpy.distutils \
              --hidden-import=numpy.f2py \
              --hidden-import=numpy.ma \
              --hidden-import=numpy.matrixlib \
              --hidden-import=numpy.compat \
              --hidden-import=numpy.ctypeslib \
              --collect-data=pandas \
              --collect-data=numpy \
              --collect-submodules=numpy \
              --collect-submodules=pandas
            if [ $? -ne 0 ]; then 
              echo "目录模式打包失败"
              exit $?
            fi
            echo "目录模式打包完成"
            # 创建zip_dist/SecRandom目录
            mkdir -p zip_dist/SecRandom
            # 复制dist/SecRandom目录下的所有文件到zip_dist/SecRandom目录下（目录模式）
            cp -r dist/SecRandom/* zip_dist/SecRandom/
          fi
          # 创建app目录
          echo "创建输出目录结构..."
          mkdir -p zip_dist/SecRandom/app
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 复制app/resource文件夹到zip_dist/SecRandom目录下
          echo "复制资源文件..."
          cp -r app/resource zip_dist/SecRandom/app
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 复制 LICENSE 文件到zip_dist/SecRandom目录下
          echo "复制许可证文件..."
          cp LICENSE zip_dist/SecRandom/
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 使用 zip 压缩文件
          echo "开始压缩打包文件..."
          outputZip="zip/SecRandom-Linux-${{ github.ref_name }}-${{ matrix.arch }}-dir.zip"
          cd zip_dist/SecRandom
          zip -r ../../$outputZip .
          if [ $? -ne 0 ]; then 
            echo "压缩文件失败"
            exit $?
          fi
          echo "打包完成: $outputZip"

      - name: SignPath 代码签名 - 所有文件
        if: ${{ matrix.os == 'windows-2022'}} 
        run: |
          echo "开始 SignPath 代码签名..."
          # 安装 SignPath PowerShell 模块
          Install-Module -Name SignPath -Force -Scope CurrentUser
          
          # 检查是否有需要签名的文件列表
          if (Test-Path "sign_files.txt") {
            echo "找到需要签名的文件列表:"
            Get-Content sign_files.txt
            
            # 创建一个临时文件来保存有效的文件路径
            $validFiles = @()
            
            # 逐个签名文件
            Get-Content sign_files.txt | ForEach-Object {
              $line = $_.Trim()
              if ($line -match "^主可执行文件路径: (.+)$") {
                $filePath = $matches[1]
                if (Test-Path $filePath) {
                  echo "正在签名文件: $filePath"
                  Submit-SigningRequest `
                    -InputArtifactPath $filePath `
                    -ApiToken "${{ secrets.SIGNPATH_API_TOKEN }}" `
                    -OrganizationId "dae8fd2b-8a02-4e36-aa15-3c8f475bc6b7" `
                    -ProjectSlug "SecRandom" `
                    -SigningPolicySlug "SecRandom" `
                    -OutputArtifactPath $filePath `
                    -WaitForCompletion
                  echo "文件签名完成: $filePath"
                  $validFiles += $line
                } else {
                  echo "警告: 文件不存在，跳过签名: $filePath"
                }
              } elseif ($line -match "^打包模式: (.+)$") {
                # 保留打包模式信息
                $validFiles += $line
              }
            }
            
            # 将有效的文件路径和打包模式写回sign_files.txt
            Set-Content -Path "sign_files.txt" -Value $validFiles
            echo "已更新sign_files.txt文件，仅保留有效条目"
          } else {
            echo "未找到需要签名的文件列表 (sign_files.txt)"
            echo "当前目录内容:"
            Get-ChildItem -Path "." -Name
            # 创建空的sign_files.txt文件，避免后续步骤失败
            New-Item -Path "sign_files.txt" -ItemType File -Force
          }
          echo "SignPath 代码签名完成"

      - name: 签名后打包操作
        if: ${{ matrix.os == 'windows-2022'}} 
        run: |
          echo "开始签名后打包操作..."
          
          # 检查打包模式并执行相应的打包操作
          if (Test-Path "sign_files.txt") {
            $packMode = ""
            $exePath = ""
            # 从sign_files.txt中读取打包模式和可执行文件路径
            Get-Content sign_files.txt | ForEach-Object {
              $line = $_.Trim()
              if ($line -match "^打包模式: (.+)$") {
                $packMode = $matches[1]
                echo "检测到打包模式: $packMode"
              } elseif ($line -match "^主可执行文件路径: (.+)$") {
                $exePath = $matches[1]
                echo "检测到主可执行文件路径: $exePath"
              }
            }
            
            # 根据打包模式执行相应的打包操作
            if ($packMode -eq "dir") {
              echo "执行目录模式打包..."
              
              # 检查可执行文件是否存在
              if (-not [string]::IsNullOrEmpty($exePath) -and (Test-Path $exePath)) {
                # 创建zip_dist/SecRandom目录
                mkdir -p zip_dist/SecRandom
                
                # 复制dist/SecRandom目录下的所有文件到zip_dist/SecRandom目录下
                Copy-Item -Recurse -Force dist/SecRandom/* zip_dist/SecRandom/
                
                # 创建app目录
                mkdir -p zip_dist/SecRandom/app
                
                # 复制app/resource文件夹到zip_dist/SecRandom目录下
                Copy-Item -Recurse -Force app/resource zip_dist/SecRandom/app
                
                # 复制 LICENSE 文件到zip_dist/SecRandom目录下
                Copy-Item LICENSE zip_dist/SecRandom/
                
                # 使用 zip 压缩文件
                mkdir zip -Force
                $outputZip = "zip/SecRandom-Windows-${{ github.ref_name }}-${{ matrix.arch }}-dir.zip"
                Compress-Archive -Path zip_dist/SecRandom/* -DestinationPath $outputZip -Force
                echo "目录模式打包完成: $outputZip"
              } else {
                echo "错误: 主可执行文件不存在，无法执行目录模式打包"
                # 列出dist目录内容以便调试
                echo "dist目录内容:" 
                Get-ChildItem -Path "dist" -Recurse | ForEach-Object { echo "  $($_.FullName)" }
              }
              
            } elseif ($packMode -eq "advanced") {
              echo "执行 Advanced Installer 模式打包..."
              
              # 检查可执行文件是否存在
              if (-not [string]::IsNullOrEmpty($exePath) -and (Test-Path $exePath)) {
                # 创建 Advanced Installer 项目目录
                echo "创建 Advanced Installer 项目目录..."
                mkdir installer_build
                
                # 复制 PyInstaller 输出到 Advanced Installer 目录
                echo "复制文件到安装程序目录..."
                Copy-Item -Recurse -Force dist/SecRandom installer_build/AppFiles
                
                # 复制资源文件
                echo "复制资源文件..."
                Copy-Item -Recurse -Force app/resource installer_build/AppFiles/app
                Copy-Item LICENSE installer_build/AppFiles
                Copy-Item resources/SecRandom.ico installer_build
                
                # 使用 Advanced Installer 编译安装程序
                echo "使用 Advanced Installer 编译安装程序..."
                
                # 检查 Advanced Installer 是否可用
                if (Get-Command "AdvancedInstaller.com" -ErrorAction SilentlyContinue) {
                echo "使用 Advanced Installer 编译..."
                
                # 复制 Advanced Installer 项目文件到构建目录
                if (Test-Path "SR64.aip") {
                  echo "找到 SR64.aip 文件，开始复制..."
                  Copy-Item SR64.aip installer_build/SecRandom.aip
                  echo "项目文件复制完成"
                  
                  # 验证复制后的文件
                  if (-not (Test-Path "installer_build/SecRandom.aip")) {
                    echo "错误：项目文件复制失败"
                    exit 1
                  }
                  
                  # 设置项目版本 - 验证版本号格式
                  $version = "${{ github.ref_name }}"
                  # 如果不是以v开头的版本号（如v1.0.0.0），则使用默认版本号
                  if ($version -match "^v\d+(\.\d+){3}$") {
                    $version = $version.Substring(1) # 移除v前缀
                  } else {
                    $version = "1.0.0.0" # 默认版本号（4位）
                  }
                  echo "使用版本号: $version"
                  
                  # 设置版本号
                  echo "正在设置项目版本..."
                  AdvancedInstaller.com edit /set version $version installer_build/SecRandom.aip
                  if ($LASTEXITCODE -ne 0) { 
                    echo "版本号设置失败"
                    exit $LASTEXITCODE 
                  }
                  echo "版本号设置完成"
                  
                  # 注册 Windows Installer 相关设置
                  echo "正在注册 Windows Installer 设置..."
                  AdvancedInstaller.com edit /RegisterWithWindowsInstaller installer_build/SecRandom.aip
                  if ($LASTEXITCODE -ne 0) { 
                    echo "警告：Windows Installer 注册失败，继续构建..."
                    # 不退出，继续构建流程
                  } else {
                    echo "Windows Installer 注册完成"
                  }
                  
                  # 编辑更新通知设置
                  echo "正在配置更新通知设置..."
                  AdvancedInstaller.com edit /EditUpdateNotification installer_build/SecRandom.aip
                  if ($LASTEXITCODE -ne 0) { 
                    echo "警告：更新通知配置失败，继续构建..."
                    # 不退出，继续构建流程
                  } else {
                    echo "更新通知配置完成"
                  }
                  
                  # 构建安装程序 - 生成EXE格式
                  echo "开始构建安装程序..."
                  AdvancedInstaller.com build installer_build/SecRandom.aip -builds EXE
                  if ($LASTEXITCODE -ne 0) { 
                    echo "Advanced Installer 编译失败"
                    echo "退出代码: $LASTEXITCODE"
                    exit $LASTEXITCODE 
                  }
                  echo "Advanced Installer 编译完成"
                  
                  # 查找构建输出的安装程序文件
                  $outputExe = "installer_build/SecRandom.exe"
                  if (-not (Test-Path $outputExe)) {
                    echo "未找到预期的输出文件，搜索其他可能的输出位置..."
                    # 搜索可能的输出文件
                    $exeFiles = Get-ChildItem -Path "installer_build" -Recurse -Filter "*.exe"
                    if ($exeFiles.Count -gt 0) {
                      $outputExe = $exeFiles[0].FullName
                      echo "找到安装程序文件: $outputExe"
                    } else {
                      echo "错误：未找到任何安装程序输出文件"
                      exit 1
                    }
                  }
                  
                  # 将安装程序复制到 zip 目录
                  mkdir zip -Force
                  $finalExePath = "zip/SecRandom-Installer-${{ github.ref_name }}.exe"
                  Copy-Item $outputExe $finalExePath
                  echo "Advanced Installer 模式打包完成: $finalExePath"
                } else {
                  echo "未找到 SR64.aip 文件，请确保该文件存在于项目根目录"
                  exit 1
                }
              } else {
                echo "Advanced Installer 未找到，创建 ZIP 压缩包作为替代..."
                mkdir zip_dist/SecRandom
                Copy-Item -Recurse -Force dist/SecRandom/* zip_dist/SecRandom
                mkdir zip_dist/SecRandom/app
                Copy-Item -Recurse -Force app/resource zip_dist/SecRandom/app
                Copy-Item LICENSE zip_dist/SecRandom
                
                mkdir zip -Force
                $outputZip = "zip/SecRandom-Windows-${{ github.ref_name }}-${{ matrix.arch }}-advanced.zip"
                Compress-Archive -Path zip_dist/SecRandom/* -DestinationPath $outputZip -Force
                echo "Advanced Installer 模式打包完成（ZIP 格式）: $outputZip"
              }
              
              } else {
                echo "错误: 主可执行文件不存在，无法执行 Advanced Installer 模式打包"
                # 列出dist目录内容以便调试
                echo "dist目录内容:" 
                Get-ChildItem -Path "dist" -Recurse | ForEach-Object { echo "  $($_.FullName)" }
              }
              
            } else {
              echo "未识别的打包模式: $packMode，跳过打包操作"
            }
            
          } else {
            echo "未找到 sign_files.txt 文件，无法确定打包模式，跳过打包操作"
            # 创建空的sign_files.txt文件，以便下次运行
            New-Item -Path "sign_files.txt" -ItemType File -Force
          }
          echo "签名后打包操作完成"

      - name: 上传应用程序
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-2022-${{ matrix.arch }}-${{ matrix.pack_mode }}
          path: ./zip

  release:
    needs: [builder_matrix]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    uses: ./.github/workflows/release.yml
    with:
      runid: ${{ github.run_id }}