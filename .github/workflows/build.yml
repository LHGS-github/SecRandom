name: 构建

# 触发工作流的事件
on: 
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  builder_matrix:
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86, x64, arm64 ]
        os: [ ubuntu-20.04, windows-latest, macos-13, macos-14 ]
        exclude:
          - os: ubuntu-20.04
            arch: x86
          - os: ubuntu-20.04
            arch: arm64
          - os: macos-13
            arch: x86
          - os: macos-13
            arch: arm64
          - os: windows-latest
            arch: arm64
          - os: macos-14
            arch: x86
          - os: macos-14
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4.2.2
      - name: 安装 Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.8.10'
          architecture: ${{ matrix.arch }}
      - name: 安装 uv
        uses: astral-sh/setup-uv@v4
      - name: 初始化 zip 文件夹
        run: mkdir zip

      - name: 运行 Windows 构建
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          # 下载 zip.exe 工具
          curl -o zip.exe -L http://www.stahlworks.com/dev/zip.exe
          # 创建虚拟环境
          uv venv
          # 激活虚拟环境
          .venv/Scripts/activate
          # 安装依赖
          uv pip install -r requirements.txt
          # 安装 pyinstaller
          uv pip install pyinstaller
          # 使用 pyinstaller 打包应用程序
          pyinstaller main.py `
            -w `
            -i ./resources/SecRandom.ico `
            -n SecRandom `
            --contents-directory . `
            --add-data ./app/resource/icon:app/resource/icon `
            --add-data ./app/resource/README:app/resource/README `
            --add-data ./app/resource/font:app/resource/font `
            --add-data ./app/Settings:app/Settings `
            --add-data ./app/update:app/update `
            --add-data LICENSE:.
          # 使用 zip.exe 工具将打包好的文件压缩成 ZIP 文件
          ./zip -r -q "zip/SecRandom-Windows-${{ matrix.arch }} (Unsigned).zip" dist/SecRandom/*

      - name: 运行 Linux 构建
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          # 创建虚拟环境
          uv venv
          # 激活虚拟环境
          source .venv/bin/activate
          # 安装依赖
          uv pip install -r requirements.txt
          # 安装 pyinstaller
          uv pip install pyinstaller
          # 使用 pyinstaller 打包应用程序
          pyinstaller main.py \
            -w \
            -i ./resources/SecRandom.ico \
            -n SecRandom \
            --contents-directory . \
            --add-data ./app/resource/icon:app/resource/icon \
            --add-data ./app/resource/README:app/resource/README \
            --add-data ./app/resource/font:app/resource/font \
            --add-data ./app/Settings:app/Settings \
            --add-data ./app/update:app/update \
            --add-data LICENSE:.
          # 使用系统自带的 zip 工具将打包好的文件压缩成 ZIP 文件
          zip -r -q zip/SecRandom-Ubuntu22.04.zip dist/SecRandom/*

      - name: 运行 macOS 构建
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          # 创建虚拟环境
          uv venv
          # 激活虚拟环境
          source .venv/bin/activate
          # 安装依赖
          uv pip install -r requirements.txt
          # 安装 pyinstaller
          uv pip install pyinstaller
          # 使用 pyinstaller 打包应用程序
          pyinstaller main.py \
            -w \
            -i ./resources/SecRandom.icns \
            -n "SecRandom" \
            --contents-directory . \
            --add-data ./app/resource/icon:app/resource/icon \
            --add-data ./app/resource/README:app/resource/README \
            --add-data ./app/resource/font:app/resource/font \
            --add-data ./app/Settings:app/Settings \
            --add-data ./app/update:app/update \
            --add-data LICENSE:.
          # 使用系统自带的 zip 工具将打包好的文件压缩成 ZIP 文件
          zip -r -q "zip/SecRandom-macOS-${{ matrix.arch }} (bundle).zip" dist/SecRandom.app/*
          zip -r -q zip/SecRandom-macOS-${{ matrix.arch }}.zip dist/SecRandom/*

      - name: 上传未签名的应用程序
        if: ${{ ( matrix.os != 'windows-latest' && github.event_name != 'pull_request' ) || github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: ./zip

      - name: 上传未签名的单个文件
        if: ${{ matrix.os == 'windows-latest' && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-${{ matrix.arch }} (Unsigned single)
          path: ./dist/SecRandom/SecRandom.exe

      - name: 删除未签名的 ZIP 文件
        if: ${{ matrix.os == 'windows-latest' && github.event_name != 'pull_request' }}
        run: |
          del "zip/SecRandom-Windows-${{ matrix.arch }} (Unsigned).zip"
          ./zip -r -q zip/SecRandom-Windows-${{ matrix.arch }}.zip dist/SecRandom/*

      - name: 上传已签名的应用程序
        if: ${{ matrix.os == 'windows-latest' && github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-latest-${{ matrix.arch }}
          path: ./zip

  debian:
    runs-on: ubuntu-latest
    container:
      image: debian:10
    steps:
      - name: 安装依赖
        shell: bash
        run: |
          apt-get update
          apt-get install -y wget zip binutils libglib2.0-dev libfreetype6 libxfixes3 libgssapi-krb5-2 libdbus-1-3 libxext6 libfontconfig1 libxrandr2 libnspr4 libx11-xcb1 libxrender1 libasound2 libxkbcommon0 libxtst6 libnss3 libxdamage1 libxcomposite1 libcups2 libwayland-client0 libwayland-cursor0 libcairo2 libcairo-gobject2 libpango-1.0-0 libgtk-3-0 libgdk-pixbuf2.0-0 libxkbcommon-x11-0 libwayland-egl1 libxcb-xinerama0 libxcb-render-util0 libxcb-randr0 libxcb-image0 libxcb-sync1 libxcb-keysyms1 libxcb-shape0 libxcb-xfixes0 libxcb-icccm4 libxcb-glx0 git
          wget http://ftp.debian.org/debian/pool/main/x/xcb-util/libxcb-util1_0.4.0-1+b1_amd64.deb
          dpkg -i libxcb-util1_0.4.0-1+b1_amd64.deb
      - name: 检出仓库
        uses: actions/checkout@v4.2.2
      - name: 安装 uv 和 Python
        uses: astral-sh/setup-uv@v4
        with:
          python-version: 3.8.10
      - name: 运行 Linux (Debian 10) 构建
        shell: bash
        run: |
          mkdir zip
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install pyinstaller
          pyinstaller main.py \
            -w \
            -n SecRandom \
            --contents-directory . \
            --add-data ./app/resource/icon:app/resource/icon \
            --add-data ./app/resource/README:app/resource/README \
            --add-data ./app/resource/font:app/resource/font \
            --add-data ./app/Settings:app/Settings \
            --add-data ./app/update:app/update \
            --add-data LICENSE:.
          zip -r -q zip/SecRandom-Debian10.zip dist/SecRandom/*

      - name: 上传
        uses: actions/upload-artifact@v4.4.2
        with:
          name: debian10-x64
          path: ./zip

  release:
    needs: [debian, builder_matrix]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    uses: ./.github/workflows/release.yml
    with:
      runid: ${{ github.run_id }}