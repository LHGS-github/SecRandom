name: 构建

on: 
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  builder_matrix:
    # 仅在push或pull_request事件包含'进行打包'时执行，workflow_dispatch无条件执行
    if: |
      github.event_name == 'workflow_dispatch' || 
      contains(github.event.head_commit.message, '进行打包') ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '进行打包'))
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            arch: x86
            pack_mode: dir
          - os: windows-2022
            arch: x64
            pack_mode: dir
          - os: windows-2022
            arch: x86
            pack_mode: onefile
          - os: windows-2022
            arch: x64
            pack_mode: onefile
          - os: ubuntu-latest
            arch: x64
            pack_mode: dir
          - os: ubuntu-latest
            arch: x64
            pack_mode: onefile
    runs-on: ${{ matrix.os }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4.2.2
      - name: 安装 Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.os == 'windows-2022' && '3.8.10' || '3.13.1' }}
          architecture: ${{ matrix.arch }}
      - name: 安装 uv
        uses: astral-sh/setup-uv@v4
      - name: 初始化 zip 文件夹
        run: mkdir zip

      - name: 更新 version_info.txt
        if: startsWith(github.ref_name, 'v')
        run: |
          python update_version.py
        env:
          VERSION: ${{ github.ref_name }}

      - name: 运行 Windows 构建
        if: ${{ matrix.os == 'windows-2022' }}
        run: |
          echo "开始 Windows 构建流程..."
          # 创建虚拟环境
          echo "创建虚拟环境..."
          uv venv
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 激活虚拟环境
          echo "激活虚拟环境..."
          .venv/Scripts/activate
          
          # 安装依赖
          echo "安装项目依赖..."
          uv pip install -r requirements-windows.txt
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 安装 pyinstaller
          echo "安装 PyInstaller..."
          uv pip install pyinstaller
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 清理之前的构建文件
          echo "清理之前的构建文件..."
          Remove-Item -Recurse -Force dist -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force zip_dist -ErrorAction SilentlyContinue
          echo "构建环境准备完成"
          # 根据打包模式选择不同的PyInstaller参数
          if ('${{ matrix.pack_mode }}' -eq 'dir') {
            # 目录模式打包
            echo "开始目录模式打包..."
            pyinstaller main.py `
              -w `
              -D `
              -i ./resources/SecRandom.ico `
              -n SecRandom `
              --add-data ./app/resource:app/resource `
              --add-data LICENSE:. `
              --version-file=version_info.txt `
              --hidden-import=psutil._psutil_windows `
              --hidden-import=pandas._libs.interval `
              --hidden-import=pandas._libs.ops `
              --hidden-import=pandas._libs.tslibs `
              --hidden-import=pandas._libs.lib `
              --hidden-import=pandas._libs.testing `
              --hidden-import=pandas._libs.window `
              --hidden-import=pandas._libs.missing `
              --hidden-import=pandas._libs.hashtable `
              --hidden-import=pandas._libs.skiplist `
              --hidden-import=pandas._libs.hashing `
              --hidden-import=pandas._libs.writers `
              --hidden-import=pandas._libs.json `
              --hidden-import=pandas._libs.parsers `
              --hidden-import=pandas._libs.properties `
              --hidden-import=pandas._libs.reshape `
              --hidden-import=pandas._libs.sparse `
              --hidden-import=pandas._libs.groupby `
              --hidden-import=pandas._libs.join `
              --hidden-import=pandas._libs.reduction `
              --hidden-import=pandas._libs.algos `
              --hidden-import=pandas._libs.ops_dispatch `
              --hidden-import=pandas._libs.arrays `
              --hidden-import=pandas._libs.internals `
              --hidden-import=pandas._libs.tslibs.base `
              --hidden-import=pandas._libs.tslibs.dtypes `
              --hidden-import=pandas._libs.tslibs.conversion `
              --hidden-import=pandas._libs.tslibs.nattype `
              --hidden-import=pandas._libs.tslibs.np_datetime `
              --hidden-import=pandas._libs.tslibs.period `
              --hidden-import=pandas._libs.tslibs.strptime `
              --hidden-import=pandas._libs.tslibs.timestamps `
              --hidden-import=pandas._libs.tslibs.timedeltas `
              --hidden-import=pandas._libs.tslibs.timezones `
              --hidden-import=pandas._libs.tslibs.tzconversion `
              --hidden-import=pandas._libs.tslibs.vectorized `
              --hidden-import=numpy `
              --hidden-import=numpy.core._dtype_ctypes `
              --hidden-import=numpy.core._exceptions `
              --hidden-import=numpy.core._internal `
              --hidden-import=numpy.core._methods `
              --hidden-import=numpy.core._string_helpers `
              --hidden-import=numpy.core._type_aliases `
              --hidden-import=numpy.core._ufunc_config `
              --hidden-import=numpy.linalg `
              --hidden-import=numpy.linalg.linalg `
              --hidden-import=numpy.linalg._umath_linalg `
              --hidden-import=numpy.fft `
              --hidden-import=numpy.fft._pocketfft_internal `
              --hidden-import=numpy.random `
              --hidden-import=numpy.random.bit_generator `
              --hidden-import=numpy.random._common `
              --hidden-import=numpy.random._pickle `
              --hidden-import=numpy.random._mt19937 `
              --hidden-import=numpy.random._philox `
              --hidden-import=numpy.random._pcg64 `
              --hidden-import=numpy.random._sfc64 `
              --hidden-import=numpy.random._generator `
              --hidden-import=numpy.random._bounded_integers `
              --hidden-import=numpy.random.mtrand `
              --hidden-import=numpy.lib `
              --hidden-import=numpy.lib.scimath `
              --hidden-import=numpy.lib.stride_tricks `
              --hidden-import=numpy.core._multiarray_umath `
              --hidden-import=numpy.core._multiarray_tests `
              --hidden-import=numpy.polynomial `
              --hidden-import=numpy.testing `
              --hidden-import=numpy.distutils `
              --hidden-import=numpy.f2py `
              --hidden-import=numpy.ma `
              --hidden-import=numpy.matrixlib `
              --hidden-import=numpy.compat `
              --hidden-import=numpy.ctypeslib `
              --collect-data=pandas `
              --collect-data=numpy `
              --collect-submodules=numpy `
              --collect-submodules=pandas
            if ($LASTEXITCODE -ne 0) { 
              echo "目录模式打包失败"
              exit $LASTEXITCODE 
            }
            echo "目录模式打包完成"
            # 创建zip_dist/SecRandom目录
            mkdir zip_dist/SecRandom
            # 复制dist/SecRandom目录下的所有文件到zip_dist/SecRandom目录下（目录模式）
            Copy-Item -Recurse -Force dist/SecRandom/* zip_dist/SecRandom
          } else {
            # 单文件模式打包
            echo "开始单文件模式打包..."
            pyinstaller main.py `
              -w `
              -F `
              -i ./resources/SecRandom.ico `
              -n SecRandom `
              --onefile `
              --contents-directory . `
              --add-data ./app/resource:app/resource `
              --add-data LICENSE:. `
              --version-file=version_info.txt `
              --hidden-import=psutil._psutil_windows `
              --hidden-import=pandas._libs.interval `
              --hidden-import=pandas._libs.ops `
              --hidden-import=pandas._libs.tslibs `
              --hidden-import=pandas._libs.lib `
              --hidden-import=pandas._libs.testing `
              --hidden-import=pandas._libs.window `
              --hidden-import=pandas._libs.missing `
              --hidden-import=pandas._libs.hashtable `
              --hidden-import=pandas._libs.skiplist `
              --hidden-import=pandas._libs.hashing `
              --hidden-import=pandas._libs.writers `
              --hidden-import=pandas._libs.json `
              --hidden-import=pandas._libs.parsers `
              --hidden-import=pandas._libs.properties `
              --hidden-import=pandas._libs.reshape `
              --hidden-import=pandas._libs.sparse `
              --hidden-import=pandas._libs.groupby `
              --hidden-import=pandas._libs.join `
              --hidden-import=pandas._libs.reduction `
              --hidden-import=pandas._libs.algos `
              --hidden-import=pandas._libs.ops_dispatch `
              --hidden-import=pandas._libs.arrays `
              --hidden-import=pandas._libs.internals `
              --hidden-import=pandas._libs.tslibs.base `
              --hidden-import=pandas._libs.tslibs.dtypes `
              --hidden-import=pandas._libs.tslibs.conversion `
              --hidden-import=pandas._libs.tslibs.nattype `
              --hidden-import=pandas._libs.tslibs.np_datetime `
              --hidden-import=pandas._libs.tslibs.period `
              --hidden-import=pandas._libs.tslibs.strptime `
              --hidden-import=pandas._libs.tslibs.timestamps `
              --hidden-import=pandas._libs.tslibs.timedeltas `
              --hidden-import=pandas._libs.tslibs.timezones `
              --hidden-import=pandas._libs.tslibs.tzconversion `
              --hidden-import=pandas._libs.tslibs.vectorized `
              --hidden-import=numpy `
              --hidden-import=numpy.core._dtype_ctypes `
              --hidden-import=numpy.core._exceptions `
              --hidden-import=numpy.core._internal `
              --hidden-import=numpy.core._methods `
              --hidden-import=numpy.core._string_helpers `
              --hidden-import=numpy.core._type_aliases `
              --hidden-import=numpy.core._ufunc_config `
              --hidden-import=numpy.linalg `
              --hidden-import=numpy.linalg.linalg `
              --hidden-import=numpy.linalg._umath_linalg `
              --hidden-import=numpy.fft `
              --hidden-import=numpy.fft._pocketfft_internal `
              --hidden-import=numpy.random `
              --hidden-import=numpy.random.bit_generator `
              --hidden-import=numpy.random._common `
              --hidden-import=numpy.random._pickle `
              --hidden-import=numpy.random._mt19937 `
              --hidden-import=numpy.random._philox `
              --hidden-import=numpy.random._pcg64 `
              --hidden-import=numpy.random._sfc64 `
              --hidden-import=numpy.random._generator `
              --hidden-import=numpy.random._bounded_integers `
              --hidden-import=numpy.random.mtrand `
              --hidden-import=numpy.lib `
              --hidden-import=numpy.lib.scimath `
              --hidden-import=numpy.lib.stride_tricks `
              --hidden-import=numpy.core._multiarray_umath `
              --hidden-import=numpy.core._multiarray_tests `
              --hidden-import=numpy.polynomial `
              --hidden-import=numpy.testing `
              --hidden-import=numpy.distutils `
              --hidden-import=numpy.f2py `
              --hidden-import=numpy.ma `
              --hidden-import=numpy.matrixlib `
              --hidden-import=numpy.compat `
              --hidden-import=numpy.ctypeslib `
              --collect-data=pandas `
              --collect-data=numpy `
              --collect-submodules=numpy `
              --collect-submodules=pandas
            if ($LASTEXITCODE -ne 0) { 
              echo "单文件模式打包失败"
              exit $LASTEXITCODE 
            }
            echo "单文件模式打包完成"
            # 创建zip_dist/SecRandom目录
            mkdir zip_dist/SecRandom
            # 复制dist目录下的所有文件到zip_dist/SecRandom目录下（单文件模式）
            Copy-Item -Recurse -Force dist/* zip_dist/SecRandom
          }
          # 创建app目录
          echo "创建输出目录结构..."
          mkdir zip_dist/SecRandom/app
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 复制app/resource文件夹到zip_dist/SecRandom目录下
          echo "复制资源文件..."
          Copy-Item -Recurse -Force app/resource zip_dist/SecRandom/app
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 复制 LICENSE 文件到zip_dist/SecRandom目录下
          echo "复制许可证文件..."
          Copy-Item LICENSE zip_dist/SecRandom
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # 使用系统自带的 Compress-Archive 压缩文件
          echo "开始压缩打包文件..."
          $packModeName = if ('${{ matrix.pack_mode }}' -eq 'dir') { 'dir' } else { 'onefile' }
          $outputZip = "zip/SecRandom-Windows-${{ github.ref_name }}-${{ matrix.arch }}-$packModeName.zip"
          Compress-Archive -Path zip_dist/SecRandom/* -DestinationPath $outputZip -Force
          if ($LASTEXITCODE -ne 0) { 
            echo "压缩文件失败"
            exit $LASTEXITCODE 
          }
          echo "打包完成: $outputZip"

      - name: 运行 Linux 构建
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "开始 Linux 构建流程..."
          # 安装系统依赖
          echo "安装系统依赖..."
          sudo apt-get update
          sudo apt-get install -y libxcb-cursor0 libxcb-cursor-dev libxkbcommon-x11-0 libxkbcommon-dev
          
          # 创建虚拟环境
          echo "创建虚拟环境..."
          uv venv
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 激活虚拟环境
          echo "激活虚拟环境..."
          source .venv/bin/activate
          
          # 安装依赖
          echo "安装项目依赖..."
          uv pip install -r requirements-linux.txt
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 安装 pyinstaller
          echo "安装 PyInstaller..."
          uv pip install pyinstaller
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 清理之前的构建文件
          echo "清理之前的构建文件..."
          rm -rf dist build zip_dist
          echo "构建环境准备完成"
          
          # 根据打包模式选择不同的PyInstaller参数
          if [ '${{ matrix.pack_mode }}' = 'dir' ]; then
            # 目录模式打包
            echo "开始目录模式打包..."
            pyinstaller main.py \
              -w \
              -D \
              -i ./resources/SecRandom.ico \
              -n SecRandom \
              --add-data ./app/resource:app/resource \
              --add-data LICENSE:. \
              --version-file=version_info.txt \
              --hidden-import=psutil._psutil_linux \
              --hidden-import=pandas._libs.interval \
              --hidden-import=pandas._libs.ops \
              --hidden-import=pandas._libs.tslibs \
              --hidden-import=pandas._libs.lib \
              --hidden-import=pandas._libs.testing \
              --hidden-import=pandas._libs.window \
              --hidden-import=pandas._libs.missing \
              --hidden-import=pandas._libs.hashtable \
              --hidden-import=pandas._libs.skiplist \
              --hidden-import=pandas._libs.hashing \
              --hidden-import=pandas._libs.writers \
              --hidden-import=pandas._libs.json \
              --hidden-import=pandas._libs.parsers \
              --hidden-import=pandas._libs.properties \
              --hidden-import=pandas._libs.reshape \
              --hidden-import=pandas._libs.sparse \
              --hidden-import=pandas._libs.groupby \
              --hidden-import=pandas._libs.join \
              --hidden-import=pandas._libs.reduction \
              --hidden-import=pandas._libs.algos \
              --hidden-import=pandas._libs.ops_dispatch \
              --hidden-import=pandas._libs.arrays \
              --hidden-import=pandas._libs.internals \
              --hidden-import=pandas._libs.tslibs.base \
              --hidden-import=pandas._libs.tslibs.dtypes \
              --hidden-import=pandas._libs.tslibs.conversion \
              --hidden-import=pandas._libs.tslibs.nattype \
              --hidden-import=pandas._libs.tslibs.np_datetime \
              --hidden-import=pandas._libs.tslibs.period \
              --hidden-import=pandas._libs.tslibs.strptime \
              --hidden-import=pandas._libs.tslibs.timestamps \
              --hidden-import=pandas._libs.tslibs.timedeltas \
              --hidden-import=pandas._libs.tslibs.timezones \
              --hidden-import=pandas._libs.tslibs.tzconversion \
              --hidden-import=pandas._libs.tslibs.vectorized \
              --hidden-import=numpy \
              --hidden-import=numpy.core._dtype_ctypes \
              --hidden-import=numpy.core._exceptions \
              --hidden-import=numpy.core._internal \
              --hidden-import=numpy.core._methods \
              --hidden-import=numpy.core._string_helpers \
              --hidden-import=numpy.core._type_aliases \
              --hidden-import=numpy.core._ufunc_config \
              --hidden-import=numpy.linalg \
              --hidden-import=numpy.linalg.linalg \
              --hidden-import=numpy.linalg._umath_linalg \
              --hidden-import=numpy.fft \
              --hidden-import=numpy.fft._pocketfft_internal \
              --hidden-import=numpy.random \
              --hidden-import=numpy.random.bit_generator \
              --hidden-import=numpy.random._common \
              --hidden-import=numpy.random._pickle \
              --hidden-import=numpy.random._mt19937 \
              --hidden-import=numpy.random._philox \
              --hidden-import=numpy.random._pcg64 \
              --hidden-import=numpy.random._sfc64 \
              --hidden-import=numpy.random._generator \
              --hidden-import=numpy.random._bounded_integers \
              --hidden-import=numpy.random.mtrand \
              --hidden-import=numpy.lib \
              --hidden-import=numpy.lib.scimath \
              --hidden-import=numpy.lib.stride_tricks \
              --hidden-import=numpy.core._multiarray_umath \
              --hidden-import=numpy.core._multiarray_tests \
              --hidden-import=numpy.polynomial \
              --hidden-import=numpy.testing \
              --hidden-import=numpy.distutils \
              --hidden-import=numpy.f2py \
              --hidden-import=numpy.ma \
              --hidden-import=numpy.matrixlib \
              --hidden-import=numpy.compat \
              --hidden-import=numpy.ctypeslib \
              --collect-data=pandas \
              --collect-data=numpy \
              --collect-submodules=numpy \
              --collect-submodules=pandas
            if [ $? -ne 0 ]; then 
              echo "目录模式打包失败"
              exit $?
            fi
            echo "目录模式打包完成"
            # 创建zip_dist/SecRandom目录
            mkdir -p zip_dist/SecRandom
            # 复制dist/SecRandom目录下的所有文件到zip_dist/SecRandom目录下（目录模式）
            cp -r dist/SecRandom/* zip_dist/SecRandom/
          else
            # 单文件模式打包
            echo "开始单文件模式打包..."
            pyinstaller main.py \
              -w \
              -F \
              -i ./resources/SecRandom.ico \
              -n SecRandom \
              --onefile \
              --contents-directory . \
              --add-data ./app/resource:app/resource \
              --add-data LICENSE:. \
              --version-file=version_info.txt \
              --hidden-import=psutil._psutil_linux \
              --hidden-import=pandas._libs.interval \
              --hidden-import=pandas._libs.ops \
              --hidden-import=pandas._libs.tslibs \
              --hidden-import=pandas._libs.lib \
              --hidden-import=pandas._libs.testing \
              --hidden-import=pandas._libs.window \
              --hidden-import=pandas._libs.missing \
              --hidden-import=pandas._libs.hashtable \
              --hidden-import=pandas._libs.skiplist \
              --hidden-import=pandas._libs.hashing \
              --hidden-import=pandas._libs.writers \
              --hidden-import=pandas._libs.json \
              --hidden-import=pandas._libs.parsers \
              --hidden-import=pandas._libs.properties \
              --hidden-import=pandas._libs.reshape \
              --hidden-import=pandas._libs.sparse \
              --hidden-import=pandas._libs.groupby \
              --hidden-import=pandas._libs.join \
              --hidden-import=pandas._libs.reduction \
              --hidden-import=pandas._libs.algos \
              --hidden-import=pandas._libs.ops_dispatch \
              --hidden-import=pandas._libs.arrays \
              --hidden-import=pandas._libs.internals \
              --hidden-import=pandas._libs.tslibs.base \
              --hidden-import=pandas._libs.tslibs.dtypes \
              --hidden-import=pandas._libs.tslibs.conversion \
              --hidden-import=pandas._libs.tslibs.nattype \
              --hidden-import=pandas._libs.tslibs.np_datetime \
              --hidden-import=pandas._libs.tslibs.period \
              --hidden-import=pandas._libs.tslibs.strptime \
              --hidden-import=pandas._libs.tslibs.timestamps \
              --hidden-import=pandas._libs.tslibs.timedeltas \
              --hidden-import=pandas._libs.tslibs.timezones \
              --hidden-import=pandas._libs.tslibs.tzconversion \
              --hidden-import=pandas._libs.tslibs.vectorized \
              --hidden-import=numpy \
              --hidden-import=numpy.core._dtype_ctypes \
              --hidden-import=numpy.core._exceptions \
              --hidden-import=numpy.core._internal \
              --hidden-import=numpy.core._methods \
              --hidden-import=numpy.core._string_helpers \
              --hidden-import=numpy.core._type_aliases \
              --hidden-import=numpy.core._ufunc_config \
              --hidden-import=numpy.linalg \
              --hidden-import=numpy.linalg.linalg \
              --hidden-import=numpy.linalg._umath_linalg \
              --hidden-import=numpy.fft \
              --hidden-import=numpy.fft._pocketfft_internal \
              --hidden-import=numpy.random \
              --hidden-import=numpy.random.bit_generator \
              --hidden-import=numpy.random._common \
              --hidden-import=numpy.random._pickle \
              --hidden-import=numpy.random._mt19937 \
              --hidden-import=numpy.random._philox \
              --hidden-import=numpy.random._pcg64 \
              --hidden-import=numpy.random._sfc64 \
              --hidden-import=numpy.random._generator \
              --hidden-import=numpy.random._bounded_integers \
              --hidden-import=numpy.random.mtrand \
              --hidden-import=numpy.lib \
              --hidden-import=numpy.lib.scimath \
              --hidden-import=numpy.lib.stride_tricks \
              --hidden-import=numpy.core._multiarray_umath \
              --hidden-import=numpy.core._multiarray_tests \
              --hidden-import=numpy.polynomial \
              --hidden-import=numpy.testing \
              --hidden-import=numpy.distutils \
              --hidden-import=numpy.f2py \
              --hidden-import=numpy.ma \
              --hidden-import=numpy.matrixlib \
              --hidden-import=numpy.compat \
              --hidden-import=numpy.ctypeslib \
              --collect-data=pandas \
              --collect-data=numpy \
              --collect-submodules=numpy \
              --collect-submodules=pandas
            if [ $? -ne 0 ]; then 
              echo "单文件模式打包失败"
              exit $?
            fi
            echo "单文件模式打包完成"
            # 创建zip_dist/SecRandom目录
            mkdir -p zip_dist/SecRandom
            # 复制dist目录下的所有文件到zip_dist/SecRandom目录下（单文件模式）
            cp -r dist/* zip_dist/SecRandom/
          fi
          # 创建app目录
          echo "创建输出目录结构..."
          mkdir -p zip_dist/SecRandom/app
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 复制app/resource文件夹到zip_dist/SecRandom目录下
          echo "复制资源文件..."
          cp -r app/resource zip_dist/SecRandom/app
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 复制 LICENSE 文件到zip_dist/SecRandom目录下
          echo "复制许可证文件..."
          cp LICENSE zip_dist/SecRandom/
          if [ $? -ne 0 ]; then exit $?; fi
          
          # 使用 zip 压缩文件
          echo "开始压缩打包文件..."
          packModeName="${{ matrix.pack_mode }}"
          outputZip="zip/SecRandom-Linux-${{ github.ref_name }}-${{ matrix.arch }}-$packModeName.zip"
          cd zip_dist/SecRandom
          zip -r ../../$outputZip .
          if [ $? -ne 0 ]; then 
            echo "压缩文件失败"
            exit $?
          fi
          echo "打包完成: $outputZip"

      - name: 上传应用程序
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4.4.2
        with:
          name: windows-2022-${{ matrix.arch }}-${{ matrix.pack_mode }}
          path: ./zip

  release:
    needs: [builder_matrix]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    uses: ./.github/workflows/release.yml
    with:
      runid: ${{ github.run_id }}